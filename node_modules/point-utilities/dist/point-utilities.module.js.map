{"mappings":";;;;;;ACEO,SAAS,0CACd,aAAmC,EACjB;IAClB,SAAS,aACP,YAAqB,EACrB,WAAkB,EAClB,UAAmB,EACX;QACR,IAAI,aAAa,MAAM,KAAK,GAC1B,OAAO;QAGT,IAAI,WAAW;QACf,IAAI,YAAY,aAAa,MAAM,GAAG;QACtC,IAAI,cAAc;QAElB,MAAO,YAAY,UAAW;YAC5B,cAAc,AAAC,WAAW,cAAe;YAEzC,MAAM,eAAe,YAAY,CAAC,YAAY;YAC9C,MAAM,QAAQ,cAAc,aAAa;YACzC,IAAI,UAAU,GACZ,OAAO;iBACF,IAAI,QAAQ,GACjB,WAAW,cAAc;iBAEzB,YAAY,cAAc;QAE9B;QAEA,IAAI,YACF,OAAO;QAGT,MAAM,cAAc,YAAY,CAAC,YAAY;QAC7C,MAAM,SAAQ,cAAc,aAAa;QACzC,IAAI,WAAU,GACZ,OAAO;aACF;YACL,IAAI,YAAW;YACf,IAAI,aAAY;YAEhB,IAAI,SAAQ,GACV,aAAY,KAAK,GAAG,CAAC,cAAc,GAAG,aAAa,MAAM,GAAG;iBAE5D,YAAW,KAAK,GAAG,CAAC,GAAG,cAAc;YAGvC,MAAM,WAAW,YAAY,CAAC,UAAS;YACvC,MAAM,YAAY,YAAY,CAAC,WAAU;YAEzC,OAAO,KAAK,GAAG,CAAC,cAAc,aAAa,aACzC,KAAK,GAAG,CAAC,cAAc,aAAa,cAClC,YACA,UAAS;QACf,CAAC;IACH;IAEA,SAAS,QAAQ,CAAQ,EAAE,CAAQ,EAAU;QAC3C,MAAM,SAAS,cAAc,GAAG;QAChC,IAAI,WAAW,GACb,OAAO;aAEP,OAAO,SAAS,IAAI,KAAK,CAAC;IAE9B;IAEA,SAAS,OAAO,CAAQ,EAAE,CAAQ,EAAW;QAC3C,OAAO,cAAc,GAAG,OAAO;IACjC;IAEA,SAAS,UAAU,YAAqB,EAAE,KAAY,EAAU;QAC9D,OAAO,aAAa,cAAc,OAAO,IAAI;IAC/C;IAEA,SAAS,iBAAiB,YAAqB,EAAE,KAAY,EAAU;QACrE,OAAO,aAAa,cAAc,OAAO,KAAK;IAChD;IAEA,SAAS,sBACP,YAAqB,EACrB,WAAkB,EACV;QACR,IAAI,aAAa,MAAM,KAAK,GAC1B,OAAO;QAGT,MAAM,QAAQ,aAAa,cAAc,aAAa,KAAK;QAE3D,MAAM,aAAa,YAAY,CAAC,MAAM;QACtC,MAAM,aAAa,cAAc,YAAY;QAE7C,OAAO,aAAa,IAAI,QAAQ,IAAI,KAAK;IAC3C;IAEA,SAAS,uBACP,YAAqB,EACrB,WAAkB,EACV;QACR,IAAI,aAAa,MAAM,KAAK,GAC1B,OAAO;QAGT,MAAM,QAAQ,aAAa,cAAc,aAAa,KAAK;QAE3D,MAAM,aAAa,YAAY,CAAC,MAAM;QACtC,MAAM,aAAa,cAAc,YAAY;QAE7C,OAAO,aAAa,IAAI,QAAQ,IAAI,KAAK;IAC3C;IAEA,SAAS,YAAY,CAAQ,EAAE,CAAQ,EAAW;QAChD,OAAO,cAAc,GAAG,KAAK;IAC/B;IAEA,SAAS,qBAAqB,CAAQ,EAAE,CAAQ,EAAW;QACzD,OAAO,cAAc,GAAG,MAAM;IAChC;IAEA,SAAS,SAAS,CAAQ,EAAE,CAAQ,EAAW;QAC7C,OAAO,cAAc,GAAG,KAAK;IAC/B;IAEA,SAAS,kBAAkB,CAAQ,EAAE,CAAQ,EAAW;QACtD,OAAO,cAAc,GAAG,MAAM;IAChC;IAEA,OAAO;iBACL;gBACA;mBACA;0BACA;+BACA;gCACA;qBACA;8BACA;kBACA;2BACA;IACF;AACF;;AD7IA;;","sources":["packages/point-utilities/src/index.ts","packages/point-utilities/src/configure.ts","packages/point-utilities/src/types.ts"],"sourcesContent":["export * from \"./configure\";\nexport * from \"./types\";\n","import { ComparePoints, Utilities } from \"./types\";\n\nexport function configure<Point>(\n  comparePoints: ComparePoints<Point>\n): Utilities<Point> {\n  function binarySearch(\n    sortedPoints: Point[],\n    targetPoint: Point,\n    exactMatch: boolean\n  ): number {\n    if (sortedPoints.length === 0) {\n      return -1;\n    }\n\n    let lowIndex = 0;\n    let highIndex = sortedPoints.length - 1;\n    let middleIndex = -1;\n\n    while (lowIndex <= highIndex) {\n      middleIndex = (lowIndex + highIndex) >>> 1;\n\n      const currentPoint = sortedPoints[middleIndex];\n      const value = comparePoints(targetPoint, currentPoint);\n      if (value === 0) {\n        return middleIndex;\n      } else if (value > 0) {\n        lowIndex = middleIndex + 1;\n      } else {\n        highIndex = middleIndex - 1;\n      }\n    }\n\n    if (exactMatch) {\n      return -1;\n    }\n\n    const middlePoint = sortedPoints[middleIndex];\n    const value = comparePoints(targetPoint, middlePoint);\n    if (value === 0) {\n      return middleIndex;\n    } else {\n      let lowIndex = middleIndex;\n      let highIndex = middleIndex;\n\n      if (value > 0) {\n        highIndex = Math.min(middleIndex + 1, sortedPoints.length - 1);\n      } else {\n        lowIndex = Math.max(0, middleIndex - 1);\n      }\n\n      const lowPoint = sortedPoints[lowIndex];\n      const highPoint = sortedPoints[highIndex];\n\n      return Math.abs(comparePoints(targetPoint, lowPoint)) <\n        Math.abs(comparePoints(targetPoint, highPoint))\n        ? lowIndex\n        : highIndex;\n    }\n  }\n\n  function compare(a: Point, b: Point): number {\n    const result = comparePoints(a, b);\n    if (result === 0) {\n      return 0;\n    } else {\n      return result < 0 ? -1 : 1;\n    }\n  }\n\n  function equals(a: Point, b: Point): boolean {\n    return comparePoints(a, b) === 0;\n  }\n\n  function findIndex(sortedPoints: Point[], point: Point): number {\n    return binarySearch(sortedPoints, point, true);\n  }\n\n  function findNearestIndex(sortedPoints: Point[], point: Point): number {\n    return binarySearch(sortedPoints, point, false);\n  }\n\n  function findNearestIndexAfter(\n    sortedPoints: Point[],\n    targetPoint: Point\n  ): number {\n    if (sortedPoints.length === 0) {\n      return -1;\n    }\n\n    const index = binarySearch(sortedPoints, targetPoint, false);\n\n    const foundPoint = sortedPoints[index];\n    const comparison = comparePoints(foundPoint, targetPoint);\n\n    return comparison < 0 ? index + 1 : index;\n  }\n\n  function findNearestIndexBefore(\n    sortedPoints: Point[],\n    targetPoint: Point\n  ): number {\n    if (sortedPoints.length === 0) {\n      return -1;\n    }\n\n    const index = binarySearch(sortedPoints, targetPoint, false);\n\n    const foundPoint = sortedPoints[index];\n    const comparison = comparePoints(foundPoint, targetPoint);\n\n    return comparison > 0 ? index - 1 : index;\n  }\n\n  function greaterThan(a: Point, b: Point): boolean {\n    return comparePoints(a, b) > 0;\n  }\n\n  function greaterThanOrEqualTo(a: Point, b: Point): boolean {\n    return comparePoints(a, b) >= 0;\n  }\n\n  function lessThan(a: Point, b: Point): boolean {\n    return comparePoints(a, b) < 0;\n  }\n\n  function lessThanOrEqualTo(a: Point, b: Point): boolean {\n    return comparePoints(a, b) <= 0;\n  }\n\n  return {\n    compare,\n    equals,\n    findIndex,\n    findNearestIndex,\n    findNearestIndexAfter,\n    findNearestIndexBefore,\n    greaterThan,\n    greaterThanOrEqualTo,\n    lessThan,\n    lessThanOrEqualTo,\n  };\n}\n","export type ComparePoints<Point> = (a: Point, b: Point) => number;\n\nexport type Utilities<Point> = {\n  compare(a: Point, b: Point): number;\n  equals(a: Point, b: Point): boolean;\n  findIndex(sortedPoints: Point[], point: Point): number;\n  findNearestIndex(sortedPoints: Point[], point: Point): number;\n  findNearestIndexBefore(sortedPoints: Point[], point: Point): number;\n  findNearestIndexAfter(sortedPoints: Point[], point: Point): number;\n  greaterThan(a: Point, b: Point): boolean;\n  greaterThanOrEqualTo(a: Point, b: Point): boolean;\n  lessThan(a: Point, b: Point): boolean;\n  lessThanOrEqualTo(a: Point, b: Point): boolean;\n};\n"],"names":[],"version":3,"file":"point-utilities.module.js.map"}