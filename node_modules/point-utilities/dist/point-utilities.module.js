function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $3a790dc517b367f5$exports = {};

$parcel$export($3a790dc517b367f5$exports, "configure", () => $3a790dc517b367f5$export$8d21e34596265fa2);
function $3a790dc517b367f5$export$8d21e34596265fa2(comparePoints) {
    function binarySearch(sortedPoints, targetPoint, exactMatch) {
        if (sortedPoints.length === 0) return -1;
        let lowIndex = 0;
        let highIndex = sortedPoints.length - 1;
        let middleIndex = -1;
        while(lowIndex <= highIndex){
            middleIndex = lowIndex + highIndex >>> 1;
            const currentPoint = sortedPoints[middleIndex];
            const value = comparePoints(targetPoint, currentPoint);
            if (value === 0) return middleIndex;
            else if (value > 0) lowIndex = middleIndex + 1;
            else highIndex = middleIndex - 1;
        }
        if (exactMatch) return -1;
        const middlePoint = sortedPoints[middleIndex];
        const value1 = comparePoints(targetPoint, middlePoint);
        if (value1 === 0) return middleIndex;
        else {
            let lowIndex1 = middleIndex;
            let highIndex1 = middleIndex;
            if (value1 > 0) highIndex1 = Math.min(middleIndex + 1, sortedPoints.length - 1);
            else lowIndex1 = Math.max(0, middleIndex - 1);
            const lowPoint = sortedPoints[lowIndex1];
            const highPoint = sortedPoints[highIndex1];
            return Math.abs(comparePoints(targetPoint, lowPoint)) < Math.abs(comparePoints(targetPoint, highPoint)) ? lowIndex1 : highIndex1;
        }
    }
    function compare(a, b) {
        const result = comparePoints(a, b);
        if (result === 0) return 0;
        else return result < 0 ? -1 : 1;
    }
    function equals(a, b) {
        return comparePoints(a, b) === 0;
    }
    function findIndex(sortedPoints, point) {
        return binarySearch(sortedPoints, point, true);
    }
    function findNearestIndex(sortedPoints, point) {
        return binarySearch(sortedPoints, point, false);
    }
    function findNearestIndexAfter(sortedPoints, targetPoint) {
        if (sortedPoints.length === 0) return -1;
        const index = binarySearch(sortedPoints, targetPoint, false);
        const foundPoint = sortedPoints[index];
        const comparison = comparePoints(foundPoint, targetPoint);
        return comparison < 0 ? index + 1 : index;
    }
    function findNearestIndexBefore(sortedPoints, targetPoint) {
        if (sortedPoints.length === 0) return -1;
        const index = binarySearch(sortedPoints, targetPoint, false);
        const foundPoint = sortedPoints[index];
        const comparison = comparePoints(foundPoint, targetPoint);
        return comparison > 0 ? index - 1 : index;
    }
    function greaterThan(a, b) {
        return comparePoints(a, b) > 0;
    }
    function greaterThanOrEqualTo(a, b) {
        return comparePoints(a, b) >= 0;
    }
    function lessThan(a, b) {
        return comparePoints(a, b) < 0;
    }
    function lessThanOrEqualTo(a, b) {
        return comparePoints(a, b) <= 0;
    }
    return {
        compare: compare,
        equals: equals,
        findIndex: findIndex,
        findNearestIndex: findNearestIndex,
        findNearestIndexAfter: findNearestIndexAfter,
        findNearestIndexBefore: findNearestIndexBefore,
        greaterThan: greaterThan,
        greaterThanOrEqualTo: greaterThanOrEqualTo,
        lessThan: lessThan,
        lessThanOrEqualTo: lessThanOrEqualTo
    };
}


var $c7297aa65862f328$exports = {};




export {$3a790dc517b367f5$export$8d21e34596265fa2 as configure};
//# sourceMappingURL=point-utilities.module.js.map
