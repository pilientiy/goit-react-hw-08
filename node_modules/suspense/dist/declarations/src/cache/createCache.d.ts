import { Cache, CacheLoadOptions, CacheMap, Record, SubscriptionData } from "../types.js";
export type InternalCache<Params extends Array<any>, Value> = Cache<Params, Value> & {
    __createPendingMutationRecordMap: () => CacheMap<string, Record<Value>>;
    __getKey: (params: Params) => string;
    __getOrCreateRecord: (...params: Params) => Record<Value>;
    __isImmutable: () => boolean;
    __mutationAbortControllerMap: Map<string, AbortController>;
    __notifySubscribers: (params: Params, data?: SubscriptionData<Value>) => void;
    __recordMap: CacheMap<string, Record<Value>>;
};
export type CreateCacheOptions<Params extends Array<any>, Value> = {
    config?: {
        getCache?: (onEviction: (key: string) => void) => CacheMap<string, Record<Value>>;
        immutable?: boolean;
    };
    debugLabel?: string;
    debugLogging?: boolean;
    getKey?: (params: Params) => string;
    load: (params: Params, loadOptions: CacheLoadOptions) => PromiseLike<Value> | Value;
};
export declare function createCache<Params extends Array<any>, Value>(options: CreateCacheOptions<Params, Value>): Cache<Params, Value>;
